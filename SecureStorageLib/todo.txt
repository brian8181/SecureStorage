*Todo
		* add move / copy operations
		* remopve / rethink error handling responsibilities
		*keyloaded is this a good validation?
		*name validation, validate all name, valid len, characters etc

		* random initialization vector, stored with data, or stored in directory!
			* IMPLEMENT RANDOM IV
			* may use ArraySegment<T> Structure, humm may suck
				
	Future:
		*Local Read Buffer, have a location that auto buffers files based on? last used?, fequency?, size?
			* Optimize for least bytes downloaded

		

		* what data should be validated (exceptions thrown), what should not
			* important I want to stop data corrpution or invalid state, ie i dont not want you tbe able
				todo something that will not work
		*General	
			* default block algorithm

		* DES, RC2, Rijndael, TripleDES
		* password based key (PBKDF2-SHA1), keey keys from being stored unec rypted
		* file locking / syncronization: this has not been touched
			* need default & set expire times
			*CreateLock

		*Update a file Sequence: 

			*Lock dir file
			*Lock file
			*delete dir file
			*create new dir file
			*create new file
			*unlock file
			*unlock dir file

				*Notes
					* lock_sha526_expires
					* lock request on expired lock deletes old lock

			*locking strategy
				* create lock
				* test lock exsits, overkill?
				* test no other lock exsits
					* Delete LOCK, wait try again 
				* LOCK OBTAINED

			
		* matter a fact the name ISecureStorage should apply to my SecureStorage class, right?
		* more complex locking (expire timer)
		* make len type long
		*change SecureStorage to template? still thinking	
		* INTERFACE
					
				/// <summary>
				/// high level interface to storage
				/// </summary>
				/// 
				public interface IStorage
				{
					void Create(string name, byte[] data, FileMode mode = FileMode.Create);
					void CreateEmpty(string name, int len, bool random = false);
					void Copy(string src_name, string dst_name);
					void Move(string src_name, string dst_name);
					byte[] Read(string name, int offset, int len);
					void Delete(string name);
					int GetLength(string name);
					bool Exists(string name);
					void DeleteAll();
				}
					
		*INTERFACE ISecureStorage?
			


		* in StoragePath --->
		// BKP todo
        public static bool isValid(string name)
        {
            // todo
            string regx = @"(^(\w+/?)+)|(^/)$";

            //char[] c1 = System.IO.Path.GetInvalidFileNameChars();
            char[] invalid_chars = System.IO.Path.GetInvalidPathChars();
            return name.IndexOfAny(invalid_chars, 0) == -1;
        }

	Done:
				
		*FINISHED/READY Version.1.0.RC.1
		* make sure all Properties/Settings are nesaccary
		* look for all BKP / TODO comments
		* use consisent numeric types, long vs int, uint ? 
				* went with ints we are consistent but should it be long?
		* CloudUtility need thi? has key, iv stuff duplicated?
		* handle error consistenlly, only create returna boolean?
			*handle errors with Exception, just like FileInfo & FileStream objects
		*Create Version SercureStorageLib (Todo)
		* default fragment size is an issue
		* clean tmp.xml & tmp file creation in general
				
				 XmlDocument doc = new XmlDocument();
				// encode to string & remove: byte order mark (BOM)
				string xml = UTF8Encoding.UTF8.GetString(data);
				xml = RemoveByteOrderMarkUTF8(xml);
				// save doc
				doc.LoadXml(xml);

				//...
				string xml = doc.OuterXml;
				byte[] data = Encoding.UTF8.GetBytes(xml);
				byte[] crypt = CryptoFunctions.Encrypt(key, data, iv);
				store.Create(secure_dir_name, crypt, FileMode.Append);

		* rename ISecureStorage to IStore, IStorage? after all it is not secure
		* figure out issue on dependence to Utility library, there should be no dependence to Utility library!
		* parma order id CrytoFunction is goofy, added key & iv properties
			*public static byte[] Encrypt(byte[] key, byte[] data, byte[] iv)
	No:

*Notes
	
	*CreateName
		
		#
		let name = "/test/"
		let directory = "/"
		* this is a directory (slash at end), create directory "test/"

		#
		let name = "a/b/test.jpg"
		let directory = "a/b/"
		* this is a file (no slash at end), append to dir "a/b/", create file "a/b/test.jpg"

		#
		let name = "a/b/c/"
		let directory = "a/b/"
		* this is a directory (ends with '/'), append to dir "a/b/", create directory "a/b/c/"
